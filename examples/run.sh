
#!/bin/bash

# Script para iniciar o bot de sinais financeiros
# Uso: ./run.sh

echo "üöÄ Iniciando Bot de Sinais Financeiros..."

# Verificar se o arquivo .env existe
if [ ! -f .env ]; then
    echo "‚ùå Arquivo .env n√£o encontrado!"
    echo "Por favor, copie .env.example para .env e configure as vari√°veis."
    exit 1
fi

# Verificar se o ambiente virtual existe
if [ ! -d "venv" ]; then
    echo "üì¶ Criando ambiente virtual..."
    python -m venv venv
fi

# Ativar ambiente virtual
echo "üîÑ Ativando ambiente virtual..."
source venv/bin/activate

# Instalar depend√™ncias
echo "üìö Instalando depend√™ncias..."
pip install -r requirements.txt

# Verificar configura√ß√£o
echo "üîç Verificando configura√ß√£o..."
python -c "
from config import Config
try:
    Config.validate()
    print('‚úÖ Configura√ß√£o v√°lida!')
except Exception as e:
    print(f'‚ùå Erro na configura√ß√£o: {e}')
    exit(1)
"

if [ $? -ne 0 ]; then
    echo "‚ùå Erro na configura√ß√£o. Verifique o arquivo .env"
    exit 1
fi

# Criar diret√≥rios necess√°rios
mkdir -p logs
mkdir -p data

# Fun√ß√£o para cleanup
cleanup() {
    echo "üõë Parando servi√ßos..."
    kill $API_PID 2>/dev/null
    kill $BOT_PID 2>/dev/null
    echo "‚úÖ Servi√ßos parados."
    exit 0
}

# Configurar trap para cleanup
trap cleanup SIGINT SIGTERM

# Iniciar API em background
echo "üåê Iniciando API..."
uvicorn api:app --host 0.0.0.0 --port 8000 --log-level info > logs/api.log 2>&1 &
API_PID=$!

# Aguardar API inicializar
echo "‚è≥ Aguardando API inicializar..."
sleep 5

# Verificar se API est√° rodando
if ! curl -f http://localhost:8000/health > /dev/null 2>&1; then
    echo "‚ùå Erro ao iniciar API. Verificar logs/api.log"
    kill $API_PID 2>/dev/null
    exit 1
fi

echo "‚úÖ API iniciada com sucesso!"

# Iniciar Bot do Telegram
echo "ü§ñ Iniciando Bot do Telegram..."
python telegram_bot.py > logs/bot.log 2>&1 &
BOT_PID=$!

echo "‚úÖ Bot do Telegram iniciado!"

# Mostrar status
echo ""
echo "üéâ Sistema iniciado com sucesso!"
echo ""
echo "üìä Endpoints dispon√≠veis:"
echo "  ‚Ä¢ API: http://localhost:8000"
echo "  ‚Ä¢ Dashboard: http://localhost:8000/dashboard"
echo "  ‚Ä¢ Documenta√ß√£o: http://localhost:8000/docs"
echo "  ‚Ä¢ Sa√∫de: http://localhost:8000/health"
echo ""
echo "üìù Logs:"
echo "  ‚Ä¢ API: logs/api.log"
echo "  ‚Ä¢ Bot: logs/bot.log"
echo ""
echo "‚å®Ô∏è  Para parar os servi√ßos, pressione Ctrl+C"
echo ""

# Monitorar servi√ßos
while true; do
    # Verificar se processos ainda est√£o rodando
    if ! kill -0 $API_PID 2>/dev/null; then
        echo "‚ùå API parou inesperadamente!"
        break
    fi
    
    if ! kill -0 $BOT_PID 2>/dev/null; then
        echo "‚ùå Bot parou inesperadamente!"
        break
    fi
    
    # Mostrar status a cada 30 segundos
    sleep 30
    
    # Verificar sa√∫de da API
    if curl -f http://localhost:8000/health > /dev/null 2>&1; then
        echo "‚úÖ $(date): Sistema rodando normalmente"
    else
        echo "‚ö†Ô∏è  $(date): API com problemas"
    fi
done

# Cleanup
cleanup
